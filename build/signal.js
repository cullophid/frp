// Generated by CoffeeScript 1.10.0
(function() {
  var apply, cache, signal,
    slice = [].slice;

  cache = require('./signalCache');

  apply = require('./apply');

  signal = module.exports = function() {
    var _value, d, dependencies, emit, getSet, i, initialValue, len, listeners, read, write;
    initialValue = arguments[0], dependencies = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    listeners = [];
    _value = null;
    emit = function() {
      var i, l, len, results;
      if (typeof _value.clearCache === "function") {
        _value.clearCache();
      }
      results = [];
      for (i = 0, len = listeners.length; i < len; i++) {
        l = listeners[i];
        results.push(l());
      }
      return results;
    };
    write = function(value) {
      if (typeof value === 'function') {
        _value = cache(value);
      } else {
        _value = value;
      }
      return emit();
    };
    read = function() {
      if (typeof _value === 'function') {
        return apply(_value, dependencies);
      } else {
        return _value;
      }
    };
    write(initialValue);
    for (i = 0, len = dependencies.length; i < len; i++) {
      d = dependencies[i];
      d.addListener(emit);
    }
    getSet = function(value) {
      if (value != null) {
        return write(value);
      } else {
        return read();
      }
    };
    return Object.assign(getSet, {
      addListener: function(listener) {
        return listeners.push(listener);
      },
      removeListener: function(listener) {
        return listeners = listeners.filter((function(l) {
          return l !== listener;
        }));
      }
    });
  };

}).call(this);
